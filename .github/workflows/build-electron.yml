name: Build Electron App

on:
  push:
    branches: [main]
    paths:
      - 'packages/app/**'
      - 'packages/ui/**'
      - 'packages/shared/**'
      - 'apps/desktop/**'
  pull_request:
    branches: [main]
    paths:
      - 'packages/app/**'
      - 'packages/ui/**'
      - 'packages/shared/**'
      - 'apps/desktop/**'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.0

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file for desktop app
        run: |
          echo "VITE_APP_VERSION=${{ github.sha }}" >> apps/desktop/.env
          echo "NODE_ENV=production" >> apps/desktop/.env
          echo "VITE_API_BASE_URL=${{ env.VITE_API_BASE_URL }}" >> apps/desktop/.env
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> apps/desktop/.env

      - name: Build Electron app
        run: |
          pnpm --filter desktop build

      - name: Build Electron for Linux
        if: matrix.os == 'ubuntu-latest'
        run: pnpm --filter desktop build:linux

      - name: Build Electron for Windows
        if: matrix.os == 'windows-latest'
        run: pnpm --filter desktop build:win

      - name: Build Electron for MacOS
        if: matrix.os == 'macos-latest'
        run: pnpm --filter desktop build:mac

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: desktop-app-${{ matrix.os }}
          path: |
            apps/desktop/dist/*.AppImage
            apps/desktop/dist/*.snap
            apps/desktop/dist/*.deb
            apps/desktop/dist/*.exe
            apps/desktop/dist/*.dmg
          if-no-files-found: error
