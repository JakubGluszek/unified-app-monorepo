name: Deploy Web Apps To Linux

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/deploy-linux.yml'
      - 'apps/web/**'
      - 'apps/site/**'
      - 'apps/backend/**'
      - 'packages/**'
  pull_request:
    branches: [main]
    paths:
      - '.github/workflows/deploy-linux.yml'
      - 'apps/web/**'
      - 'apps/backend/**'
      - 'apps/site/**'
      - 'packages/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.0

      - name: Install dependencies
        run: pnpm install

      - name: Install Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: Add Bun to PATH
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Build web app
        run: pnpm --filter web build
        env:
          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}

      - name: Build site app
        run: pnpm --filter site build

      - name: Create .env file for backend app
        run: |
          echo "PORT=${{ secrets.BACKEND_PORT }}" >> apps/backend/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> apps/backend/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> apps/backend/.env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> apps/backend/.env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> apps/backend/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> apps/backend/.env
          echo "AUTH_SECRET_ACCESS_KEY=${{ secrets.AUTH_SECRET_ACCESS_KEY }}" >> apps/backend/.env

      - name: Build backend app
        run: |
          pnpm --filter backend build

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

          # If non existent, create deployment directories
          ssh $SERVER_USER@$SERVER_IP "sudo mkdir -p /var/www/html/web /var/www/html/site ~/app/backend"

          # Set ownership over the directories
          ssh $SERVER_USER@$SERVER_IP "sudo chown -R $SERVER_USER:$SERVER_USER /var/www/html/web /var/www/html/site ~/app/backend"

          # Copy web dist files
          scp -r apps/web/dist $SERVER_USER@$SERVER_IP:/var/www/html/web

          # Copy site dist files
          scp -r apps/site/dist $SERVER_USER@$SERVER_IP:/var/www/html/site

          # Copy backend dist files & .env
          scp -r apps/backend/dist $SERVER_USER@$SERVER_IP:~/app/backend
          scp -r apps/backend/.env $SERVER_USER@$SERVER_IP:~/app/backend/.env

          # Start/restart PM2 process & reload nginx
          ssh $SERVER_USER@$SERVER_IP << 'EOF'
            cd ~/app/backend
            /home/ubuntu/.local/share/pnpm/pm2 restart backend || \
            /home/ubuntu/.local/share/pnpm/pm2 start ./dist/index.js --name backend --interpreter bun
            sudo systemctl reload nginx
          EOF

          # Set appropriate permissions for nginx to serve the static apps
          ssh $SERVER_USER@$SERVER_IP "sudo chown -R www-data:www-data /var/www/html/web /var/www/html/site"

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/id_rsa
